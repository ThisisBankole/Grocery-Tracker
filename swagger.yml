openapi: 3.0.0

info:
  title: "Shopa API"
  description: "An Api to keep track of grocery shopping"
  version: "1.0.0"

servers:
  - url: "/api"

# The 'components' section is used for holding schemas and other reusable parts of the API specification
components:
# The 'schemas' keyword is used for defining the data types
  schemas:
  # Defining a 'Person' object with two properties
    User:
    # Indicating that it's an 'object' type
      type: "object"
      # 'required' lists the properties that must be present in the object
      required:
        - "first_name" # In this case, 'lname' is required
        - "last_name"
        - "email"
        - "password"
      # 'properties' lists the properties of the object and their types
      properties:
        first_name:
          type: "string"
        last_name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"

    Grocery: 
      type: "object"
      required:
        - "item"
      properties:
        item:
          type: "string"
          description: "The name of the grocery item"
        quantity:
          type: "integer"
          description: "The number of items"
        price: 
          type: "integer"
          description: "The amount it cost"
        created_at:
          type: "string"
          format: "date-time"
          description: "The date and time when the grocery item was created"
        updated_at:
          type: "string"
          format: "date-time"
          description: "The date and time when the grocery item was updated"



  parameters:
    id:
      name: "id"
      description: "Unique id of user"
      in: path
      required: true
      schema:
        type: "integer"
    
    grocery_id:
      name: "grocery_id"
      description: "unique identifier to get groceries"
      in: path
      required: true
      schema:
        type: "integer"
    
    





paths:
  /users:
    get:
      operationId: "users.read_all"
      tags:
        - users
      summary: "Read the list of users"
      responses:
        "200":
          description: "Successfully retrieved users"

    
    post: 
      operationId: "users.create"
      tags:
        - users
      summary: "Create user"
      requestBody:
        description: "user to create"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User successfully created"

# login
  /auth/login:
    post: 
      operationId: "users.login_logic"
      tags:
        - users
      summary: "Authenticate user"
      requestBody:
        description: "User credentials"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "email"
                - "password"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        "401":
          description: "Invalid credentials"




# Grocery Creation
  /grocery:

    get:
      operationId: "groceries.read_items"
      tags:
        - groceries
      summary: "read all items"
      responses:
        "200":
          description: "Items successfully retrieved"


    post: 
      operationId: "groceries.add"
      tags:
        - groceries
      summary: "create item"
      requestBody:
        description: "Creaing a grocery item"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "grocery"
              $ref: "#/components/schemas/Grocery"
      responses:
        "200":
          description: "Item successfully created"


            
  /grocery/{grocery_id}:
    get:
      operationId: "groceries.read_item"
      tags:
        - groceries
      summary: "Read item by id"
      responses:
        "200":
          description: "Item successfully retrieved"
          content: 
            application/json:
              schema:
                $ref: "#/components/parameters/grocery_id"

    put:
      operationId: "groceries.update"
      tags:
        - groceries
      summary: "Update item"
      parameters:
        - $ref: "#/components/parameters/grocery_id"
      responses:
        "200":
          description: "item successfully updated"
      requestBody: 
        content:
          application/json:
            schema:
              x-body-name: "grocery"
              properties:
                content: 
                  type: "string"


    delete:
      operationId: "groceries.delete"
      tags:
        - groceries
      summary: "Delete an item"
      parameters:
        - $ref: "#/components/parameters/grocery_id"
      responses:
        "200":
          description: "successfully deleted"